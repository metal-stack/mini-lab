---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: logto-secret-extractor
  labels:
    app.kubernetes.io/component: secret-extractor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: logto-secret-extractor
  labels:
    app.kubernetes.io/component: secret-extractor
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: logto-secret-extractor
  labels:
    app.kubernetes.io/component: secret-extractor
subjects:
  - kind: ServiceAccount
    name: logto-secret-extractor
    namespace: metal-control-plane
roleRef:
  kind: Role
  name: logto-secret-extractor
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: logto-secret-extractor
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      labels:
        app.kubernetes.io/name: logto
        app.kubernetes.io/component: secret-extractor
    spec:
      serviceAccountName: logto-secret-extractor
      restartPolicy: OnFailure
      volumes:
        - name: shared-data
          emptyDir: {}
      containers:
        - name: secret-extractor
          image: postgres:17-alpine
          env:
            - name: POSTGRES_HOST
              value: logto-postgresql
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: logto
          volumeMounts:
            - name: shared-data
              mountPath: /shared
          command:
            - /bin/sh
            - -c
            - |
              # Wait for PostgreSQL to be ready
              until PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1;" > /dev/null 2>&1; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done

              # Wait for both applications to exist and extract their secrets
              while true; do
                # Check if both applications exist and get their secrets
                SECRETS=$(PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -t -A -F"," -c \
                  "SELECT id, secret FROM applications WHERE id IN ('m-default', 'm-admin');")
                
                COUNT=$(echo "$SECRETS" | wc -l)
                if [ "$COUNT" -eq 2 ]; then
                  echo "Found both applications, extracting secrets..."
                  break
                fi
                
                echo "Waiting for applications to be created..."
                sleep 5
              done

              # Extract and base64 encode secrets
              M_DEFAULT_SECRET=$(echo "$SECRETS" | grep "^m-default," | cut -d',' -f2 | base64)
              M_ADMIN_SECRET=$(echo "$SECRETS" | grep "^m-admin," | cut -d',' -f2 | base64)

              # Create Kubernetes Secret manifest
              cat <<EOF > /shared/secret.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: logto-application-secrets
              type: Opaque
              data:
                m-default-secret: $M_DEFAULT_SECRET
                m-admin-secret: $M_ADMIN_SECRET
              EOF

              # Signal that the secret file is ready
              touch /shared/secret-ready

              # Wait for the secret to be applied
              while [ -f /shared/secret-ready ]; do
                sleep 1
              done
        - name: kubectl
          image: "bitnami/kubectl:latest"
          volumeMounts:
            - name: shared-data
              mountPath: /shared
          command:
            - /bin/sh
            - -c
            - |
              # Wait for the secret file to be ready
              while [ ! -f /shared/secret-ready ]; do
                sleep 1
              done

              # Apply the secret
              kubectl apply -f /shared/secret.yaml

              # Signal completion
              rm -f /shared/secret-ready